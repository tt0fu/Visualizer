#pragma kernel CSMain
#include <UnityCG.cginc>

# define X 1
# define Y 1
# define Z 1
float exp_bins;
float sample_rate;
float lowest_frequency;
uint dft_iteration_count;
StructuredBuffer<float> samples;
uint samples_size;
RWStructuredBuffer<float> dft;


float calculate_dft(int note) {
    float2 amplitude = 0;
    float phase_delta = ((pow(2, note / exp_bins) * lowest_frequency) / sample_rate) * UNITY_TWO_PI;
    float phase = -phase_delta * dft_iteration_count;

    float halfWindowSize = 4.0 / (phase_delta / UNITY_TWO_PI);
    float totalWindow = 0;
    for (uint sample_index = 0; sample_index < dft_iteration_count; sample_index++) {
        float window = max(0, (dft_iteration_count - sample_index) * (2 - (dft_iteration_count - sample_index) / (halfWindowSize)));

        float2 sinCos;
        sincos(phase, sinCos.x, sinCos.y);

        amplitude += sinCos * samples.Load(samples_size - sample_index - 1) * window;
        totalWindow += window;
        phase += phase_delta;
    }
    return length(amplitude) / totalWindow;
}

[numthreads(X,Y,Z)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    uint index = id.x + id.y * X + id.z * X * Y;
    dft[index] = calculate_dft(index);
}
